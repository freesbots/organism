use crate::node::Node;
use std::sync::{Arc, Mutex};
use rand::Rng;

pub struct EnergyEvolution;

impl EnergyEvolution {
    pub fn evolve(nodes: &mut Vec<Node>) {
        for node in nodes.iter_mut() {
            let mut energy = node.energy.lock().unwrap();

            // üßÆ –†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
            let consumption = 5.0 * (1.0 - node.efficiency).max(0.1);
            energy.consume(consumption);

            // üîã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)
            energy.restore(0.5 * node.resilience);

            // üå± –†–æ—Å—Ç –æ–ø—ã—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏
            if energy.level > 50.0 {
                node.experience += 0.2;
            }

            // ‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if energy.level < 10.0 {
                node.efficiency = (node.efficiency * 0.95).max(0.1);
            }

            // üîÑ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            if energy.level > 100.0 {
                energy.level = 100.0;
            } else if energy.level < 0.0 {
                energy.level = 0.0;
            }

            println!(
                "‚ö° {} ‚Üí —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏: {:.2}, –æ–ø—ã—Ç: {:.2}",
                node.name, energy.level, node.experience
            );
        }

        // üí° –≠–≤–æ–ª—é—Ü–∏—è: –Ω–æ–¥–∞ —Å –ª—É—á—à–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π –ø–æ–≤—ã—à–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if let Some((_, best)) = nodes.iter_mut()
            .enumerate()
            .max_by(|(_, a), (_, b)| {
                let ea = a.energy.lock().unwrap().level * 0.3 + a.experience * 0.7;
                let eb = b.energy.lock().unwrap().level * 0.3 + b.experience * 0.7;
                ea.partial_cmp(&eb).unwrap()
            })
        {
            best.efficiency = (best.efficiency + 0.05).min(1.0);
            best.altruism = (best.altruism + 0.02).min(1.0);
            best.resilience = (best.resilience + 0.03).min(1.5);
            println!("üåü {} —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç! (eff={:.2}, alt={:.2}, res={:.2})",
                best.name, best.efficiency, best.altruism, best.resilience
            );
        }
    }
}