use crate::node::Node;
use rand::Rng;
use std::sync::Arc;
use tokio::sync::Mutex;

pub struct EnergyEvolution;

impl EnergyEvolution {
    pub async fn evolve(nodes: &mut Vec<Arc<Mutex<Node>>>) {
        // üîÅ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã
        for node in nodes.iter() {
            let mut node_guard = node.lock().await;

            // üîã –†–∞–±–æ—Ç–∞–µ–º —Å —ç–Ω–µ—Ä–≥–∏–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ
            {
                let mut energy = node_guard.energy.lock().await;

                // üßÆ –†–∞—Å—Ö–æ–¥ —ç–Ω–µ—Ä–≥–∏–∏
                let consumption = 5.0 * (1.0 - node_guard.efficiency).max(0.1);
                energy.consume(consumption);

                // üîã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                energy.restore(0.5 * node_guard.resilience);

                // üîÑ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                energy.level = energy.level.clamp(0.0, 100.0);

                // üîÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏
                if energy.level > 50.0 {
                    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º energy –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º node_guard
                    drop(energy);
                    node_guard.experience += 0.2;
                } else if energy.level < 10.0 {
                    drop(energy);
                    node_guard.efficiency = (node_guard.efficiency * 0.95).max(0.1);
                } else {
                    drop(energy);
                }
            }

            let energy_level = node_guard.energy.lock().await.level;

            println!(
                "‚ö° {} ‚Üí —ç–Ω–µ—Ä–≥–∏—è: {:.2}, –æ–ø—ã—Ç: {:.2}",
                node_guard.name, energy_level, node_guard.experience
            );
        }
        // üí° –≠–≤–æ–ª—é—Ü–∏—è: –ø–æ–∏—Å–∫ –ª—É—á—à–µ–π –Ω–æ–¥—ã
        let mut best_index = 0;
        let mut best_score = f64::MIN;

        for (i, node) in nodes.iter().enumerate() {
            let node_guard = node.lock().await;
            let energy = node_guard.energy.lock().await;
            let score = energy.level * 0.3 + node_guard.experience * 0.7;

            if score > best_score {
                best_score = score;
                best_index = i;
            }
        }

        // üåü –≠–≤–æ–ª—é—Ü–∏—è ‚Äî —É—Å–∏–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ª—É—á—à–µ–π –Ω–æ–¥—ã
        if let Some(best_node) = nodes.get(best_index) {
            let mut n = best_node.lock().await;
            n.efficiency = (n.efficiency + 0.05).min(1.0);
            n.altruism = (n.altruism + 0.02).min(1.0);
            n.resilience = (n.resilience + 0.03).min(1.5);

            println!(
                "üåü {} —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç! (eff={:.2}, alt={:.2}, res={:.2})",
                n.name, n.efficiency, n.altruism, n.resilience
            );
        }
    }
}
