use std::sync::Arc;
use tokio::sync::Mutex;
use rand::{Rng, rngs::StdRng, SeedableRng};
use crate::{node::Node, economy::NetworkFund};

pub struct EconomyCycle;

impl EconomyCycle {
    /// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    pub async fn run(nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>, fund: Arc<Mutex<NetworkFund>>) {
        loop {
            tokio::time::sleep(std::time::Duration::from_secs(15)).await;

            let mut total_energy = 0.0;
            let mut active_nodes = 0;

            {
                println!("üí´ [DEBUG] –¶–∏–∫–ª —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω...");
                let nodes_guard = nodes.lock().await;
                for node in nodes_guard.iter() {
                    let n = node.lock().await;
                    let mut energy = n.energy.lock().await;
                    let balance = *n.wallet.balance.lock().await;

                    // üîã –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —ç–Ω–µ—Ä–≥–∏–∏
                    energy.level -= 2.0;

                    // ‚öôÔ∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Ç–µ—Ä–∏
                    energy.level *= n.efficiency.max(0.1);

                    // üíö –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ ‚Äî –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–º–µ—Ä–µ—Ç—å
                    if energy.level < 5.0 {
                        energy.level = 5.0;
                    }

                    total_energy += energy.level;
                    active_nodes += 1;

                    // üí∏ –≠–Ω–µ—Ä–≥–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ–∫–µ–Ω: –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤
                    if balance > 0.5 {
                        n.wallet.spend(0.5).await;
                    }

                    // ü§ù –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—á—å —Å–ª–∞–±–æ–º—É
                    if energy.level < 20.0 {
                        Self::help_weak_node(&nodes_guard, n.name.clone()).await;
                    }
                }
            }

            let avg_energy = total_energy / active_nodes.max(1) as f64;

            // ‚ö° –ï—Å–ª–∏ –≤—Å—è —Å–µ—Ç—å —É—Å—Ç–∞–ª–∞ ‚Äî –ø–æ–¥–ø–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Ñ–æ–Ω–¥–∞
            if avg_energy < 25.0 {
                let fund_guard = fund.lock().await;
                let mut total = fund_guard.total.lock().await; // –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é f64

                if *total > 5.0 {
                    println!("‚ö° –°–µ—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–ø–∏—Ç–∫—É –æ—Ç NetworkFund!");
                    for node in nodes.lock().await.iter() {
                        let n = node.lock().await;
                        let mut e = n.energy.lock().await;
                        e.level += 10.0;
                    }
                    *total -= 5.0; // —É–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ–Ω–¥–∞
                } else {
                    println!("‚ö†Ô∏è –§–æ–Ω–¥ –ø—É—Å—Ç ‚Äî —Å–µ—Ç—å —Å–ª–∞–±–µ–µ—Ç...");
                }
            }



            println!("üåç –°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è —Å–µ—Ç–∏: {:.2}", avg_energy);
        }
    }

    /// –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏ —Å–ª–∞–±–æ–º—É —É–∑–ª—É
    async fn help_weak_node(nodes: &Vec<Arc<Mutex<Node>>>, weak_name: String) {
        let mut rng = StdRng::from_entropy(); 

        if let Some(helper) = nodes.get(rng.gen_range(0..nodes.len())) {
            let h = helper.lock().await;
            if h.name == weak_name {
                return;
            }

            let helper_balance = *h.wallet.balance.lock().await;
            let mut helper_energy = h.energy.lock().await;

            // üí° –ü–æ–º–æ—â—å –≤–æ–∑–º–æ–∂–Ω–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É —Ö–µ–ª–ø–µ—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤
            if helper_energy.level > 40.0 && helper_balance > 10.0 {
                helper_energy.level -= 5.0;
                h.wallet.spend(2.0).await;

                println!("ü§ù {} –ø–æ–º–æ–≥–∞–µ—Ç {}", h.name, weak_name);
            }
        }
    }
}
