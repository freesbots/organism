use crate::node::Node;
use rand::seq::SliceRandom;
use rand::thread_rng;
use crate::energy_evolution::EnergyEvolution;
use std::fmt;
use std::sync::Arc;
use tokio::sync::Mutex;
use futures::future::join_all;

 

#[derive(Clone, Debug)]
pub struct Energy {
    pub level: f64,
    pub node_name: String,
}

impl Energy {
    pub fn new(name: &str) -> Self {
        Self {
            level: 100.0, // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è
            node_name: name.to_string(),
        }
    }

    pub fn consume(&mut self, amount: f64) {
        self.level = (self.level - amount).max(0.0);
    }

    pub fn restore(&mut self, amount: f64) {
        self.level = (self.level + amount).min(100.0);
    }

    pub fn is_exhausted(&self) -> bool {
        self.level <= 0.0
    }

    pub fn status(&self) -> String {
        format!("‚ö° {}: {:.2}", self.node_name, self.level)
    }
}

impl fmt::Display for Energy {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "Energy(level: {:.2}, node: {})", self.level, self.node_name)
    }
}
pub struct EnergySystem;

impl EnergySystem {
    pub async fn tick(nodes: &mut Vec<Node>) {
        // 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫ —É—Ä–æ–≤–Ω–µ–π —ç–Ω–µ—Ä–≥–∏–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π borrow)
        let energy_snapshot: Vec<f64> = join_all(
            nodes.iter().map(|n| async {
                let e = n.energy.lock().await;
                e.level
            })
        ).await;

        // 2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å —Å–ø–æ–∫–æ–π–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º
        let total_nodes = nodes.len();
        for i in 0..total_nodes {
            // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
            {
                let mut e = nodes[i].energy.lock().await;
                e.restore(0.3);
                if e.level > 100.0 {
                    e.level = 100.0;
                }
            }

            // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–¥—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–∞–ª–æ —ç–Ω–µ—Ä–≥–∏–∏ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π)
            let weak_nodes: Vec<usize> = (0..total_nodes)
                .filter(|&j| j != i && energy_snapshot[j] < 20.0)
                .collect();

            if weak_nodes.is_empty() {
                continue;
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–ª–∞–±—É—é –Ω–æ–¥—É
            let mut rng = thread_rng();
            if let Some(&target_idx) = weak_nodes.choose(&mut rng) {
                let giver_level = {
                    let e = nodes[i].energy.lock().await;
                    e.level
                };

                if giver_level > 30.0 {
                    let transfer = (giver_level * 0.1).min(10.0);

                    {
                        let mut giver_e = nodes[i].energy.lock().await;
                        giver_e.consume(transfer);
                    }

                    {
                        let mut receiver_e = nodes[target_idx].energy.lock().await;
                        receiver_e.restore(transfer);
                    }

                    let giver_now = nodes[i].energy.lock().await.level;
                    let receiver_now = nodes[target_idx].energy.lock().await.level;

                    println!(
                        "üîã {} ‚Üí {} –ø–µ—Ä–µ–¥–∞—á–∞ {:.2} —ç–Ω–µ—Ä–≥–∏–∏ (—Ç–µ–ø–µ—Ä—å {:.2}/{:.2})",
                        nodes[i].name, nodes[target_idx].name, transfer, giver_now, receiver_now
                    );
                }
            }
        }
    }
}