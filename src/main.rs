mod node;
mod network;
mod chain;
mod synapse;
mod energy;
mod neuron;
mod energy_evolution;
mod api;
mod interaction;
mod wallet;
mod economy;
mod economy_cycle;
mod brain;
mod memory;


use std::sync::Arc;
use tokio::sync::Mutex;
use tokio::task;
/* use std::time::Duration; */
use axum::{Router}; 
use tokio::net::TcpListener;
use tokio::time::{sleep, Duration};  
use tower_http::cors::{CorsLayer, Any};
use tokio::sync::RwLock;
use interaction::*;
use crate::node::Node;
use crate::api::{AppState, create_router};
use crate::energy_evolution::EnergyEvolution;
use crate::economy::NetworkFund;
use crate::economy_cycle::EconomyCycle; 
use crate::brain::{Brain, BrainSnapshot}; 
use rand::thread_rng;
use chrono::Utc;




#[tokio::main(flavor = "multi_thread")]
async fn main() {
    println!("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ORGANISM...");
    env_logger::init();

    // üß† –°–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏
    let network = Arc::new(NetworkBus::new(100));

    let count = 10;
    // üß© –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–¥
   let nodes: Vec<_> = (0..count)
    .map(|i| Node::new(&format!("node{}", i)))
    .collect();

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Arc<Mutex<Vec<...>>> ‚Äî –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø
    let shared_nodes = Arc::new(Mutex::new(nodes));
     // ‚úÖ —Å–æ–∑–¥–∞—ë–º –æ–±—â–∏–π —Ñ–æ–Ω–¥
    let fund = Arc::new(Mutex::new(NetworkFund::new()));

    // ‚úÖ —Å–æ–∑–¥–∞—ë–º –º–æ–∑–≥
    let brain = Arc::new(RwLock::new(Brain::new()));

    let snapshot = Arc::new(RwLock::new(BrainSnapshot {
        aggressiveness: 1.0,
        avg_recent_result: 0.0,
        recent_memory: Vec::new(),
        last_update: chrono::Utc::now().timestamp(),
    }));
 

    // ‚úÖ —Å–æ–∑–¥–∞—ë–º –∫–ª–æ–Ω—ã –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
    let nodes_ref = Arc::clone(&shared_nodes);
    let fund_ref = Arc::clone(&fund);
    let brain_ref: Arc<RwLock<Brain>> = Arc::clone(&brain);
    let brain_clone: Arc<RwLock<Brain>> = Arc::clone(&brain);
    let snapshot_ref: Arc<RwLock<BrainSnapshot>> = Arc::clone(&snapshot);
    let snapshot_task_ref = Arc::clone(&snapshot_ref);

    // üß¨ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    for node in shared_nodes.lock().await.iter().cloned() {
        let net = network.clone();
        task::spawn(async move {
            loop {
                if let Some(msg) = net.receive().await {
                    handle_message(node.clone(), msg, net.clone()).await;
                }
            }
        });
    }

    // üîÅ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
    {
        let net = network.clone();
        let nodes_ref = shared_nodes.clone();
        task::spawn(async move {
            let mut tick = 0;
            loop {
                sleep(Duration::from_secs(5)).await;
                tick += 1;

                let nodes = nodes_ref.lock().await;
                let idx = tick % nodes.len();
                let sender = nodes[idx].lock().await;
                let msg = Message::new(
                    &sender.name,
                    None,
                    MessageType::HelpRequest,
                    0.0,
                    Some("–ú–Ω–µ –Ω—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è ‚ö°"),
                );
                println!("üì° {} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∏–≥–Ω–∞–ª –ø–æ–º–æ—â–∏", sender.name);
                net.send(msg).await;
            }
        });
    }

    // üå± –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —ç–≤–æ–ª—é—Ü–∏—é
    {
        let evolution_nodes = shared_nodes.clone();
        task::spawn(async move {
            loop {
                {
                    let mut guard = evolution_nodes.lock().await;
                    EnergyEvolution::evolve(&mut guard).await;
                }
                println!("üíì –ü—É–ª—å—Å –æ—Ä–≥–∞–Ω–∏–∑–º–∞ (—ç–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ—à–ª–∞)");
                sleep(Duration::from_secs(10)).await;
            }
        });
    }
    

    {
        let nodes_ref = shared_nodes.clone();
        let fund_ref = fund.clone();
        task::spawn(async move {
            loop {  
                {
                    EconomyCycle::run(nodes_ref.clone(), fund_ref.clone()).await;
                }
                tokio::time::sleep(Duration::from_secs(8)).await;
                println!("üí´ [DEBUG] –¶–∏–∫–ª —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω...");
            }
        });
    }
    // üß† –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–Ω–∞–Ω–∏–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏)
    {
        let nodes_ref = shared_nodes.clone();
        let fund_ref = fund.clone(); 
        let net = network.clone();
        println!("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∑–≥–∞");

        // === –ó–∞–¥–∞—á–∞ 1: –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–∑–≥–∞ ===
        let brain_clone_for_run = Arc::clone(&brain_clone);
        let nodes_ref_clone = Arc::clone(&nodes_ref);
        let fund_ref_clone = Arc::clone(&fund_ref);
        let net_clone = Arc::clone(&net);
        println!("üß† [INIT] –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–∑–≥–∞...");  

        // === –ó–∞–ø—É—Å–∫–∞–µ–º run() –¥–ª—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–∑–≥–∞ ===
        let brain_for_run_task = Arc::clone(&brain_clone_for_run);
        let nodes_for_run_task = Arc::clone(&nodes_ref_clone);
        let fund_for_run_task = Arc::clone(&fund_ref_clone);
        let net_for_run_task = Arc::clone(&net_clone);
        /* tokio::spawn(async move {
            let mut brain_guard = brain_for_run_task.write().await;
            brain_guard.run(nodes_for_run_task, fund_for_run_task, net_for_run_task).await;
        }); */
        tokio::spawn(async move {
            loop {
                {
                    // üîπ –ë–µ—Ä—ë–º brain –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ–º–µ–Ω—Ç
                    let brain_arc = brain_for_run_task.clone();
                    let mut brain_guard = brain_arc.write().await;

                    // üîπ –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    let mut brain_copy = brain_guard.clone();
                    drop(brain_guard); // <‚Äî —Å–Ω–∏–º–∞–µ–º lock –ø—Ä—è–º–æ –∑–¥–µ—Å—å!

                    // üîπ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å .await –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî brain –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    brain_copy.run(nodes_for_run_task.clone(), fund_for_run_task.clone(), net_for_run_task.clone()).await;
                }

                // üîÅ –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                tokio::time::sleep(std::time::Duration::from_secs(2)).await;
            }
        });

        tokio::spawn(async move {
            let mut brain_copy = {
                let brain_ref = brain_clone_for_run.read().await;
                brain_ref.clone() // ‚úÖ –∫–ª–æ–Ω–∏—Ä—É–µ–º —Å–∞–º Brain, –Ω–µ guard
            };
            brain_copy.evolve_network(nodes_ref_clone, fund_ref_clone, net_clone).await;
        });
        // === –ó–∞–¥–∞—á–∞ 2: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
        let brain_for_snapshot = Arc::clone(&brain_clone);
        let snapshot_task_ref_clone = Arc::clone(&snapshot_task_ref);
        println!("üß† [DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞—Å–∫–∏ snapshot...");
       tokio::spawn(async move {
        println!("üì∏ [DEBUG] Snapshot task started!");
            // –≤–Ω—É—Ç—Ä–∏ snapshot —Ç–∞—Å–∫–∏
            loop {
                let snapshot = BrainSnapshot::from_brain_lock(&brain_for_snapshot).await;

                {
                    let mut snap = snapshot_task_ref_clone.write().await;
                    *snap = snapshot.clone();
                }

                println!(
                    "üì∏ [Snapshot] –æ–±–Ω–æ–≤–ª—ë–Ω: –ø–∞–º—è—Ç—å = {} —Å–æ–±—ã—Ç–∏–π, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å = {:.2}",
                    snapshot.recent_memory.len(),
                    snapshot.aggressiveness
                );

                // ‚è∏Ô∏è –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥ (–∞ –Ω–µ –≤ 1)
                tokio::time::sleep(Duration::from_secs(10)).await;
            }

        });
        
    }
    
    
    // üåç API —Å–µ—Ä–≤–µ—Ä
    let state = api::AppState {
        nodes: shared_nodes.clone(),
        fund: Arc::clone(&fund),
        brain: brain_ref.clone(),
        snapshot: snapshot_ref.clone(),
    };
    let app: Router = create_router(state);

    let listener = TcpListener::bind("127.0.0.1:3000").await.unwrap();
    println!("üåê API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://127.0.0.1:3000");

    axum::serve(listener, app).await.unwrap();
}