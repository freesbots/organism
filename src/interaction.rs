use serde::{Serialize, Deserialize};
use tokio::sync::mpsc;
use std::sync::Arc;
use tokio::sync::Mutex;
use crate::node::Node;

/// –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum MessageType {
    HelpRequest,       // –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏ (—ç–Ω–µ—Ä–≥–∏–∏)
    EnergyTransfer,    // –ø–µ—Ä–µ–¥–∞—á–∞ —ç–Ω–µ—Ä–≥–∏–∏
    BlockAnnouncement, // –Ω–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω
    ValidateBlock,     // –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é
}

/// –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Message {
    pub from: String,
    pub to: Option<String>, // None = —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ
    pub msg_type: MessageType,
    pub value: f64,         // —ç–Ω–µ—Ä–≥–∏—è –∏–ª–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
    pub content: Option<String>,
}

impl Message {
    pub fn new(from: &str, to: Option<&str>, msg_type: MessageType, value: f64, content: Option<&str>) -> Self {
        Self {
            from: from.to_string(),
            to: to.map(|s| s.to_string()),
            msg_type,
            value,
            content: content.map(|s| s.to_string()),
        }
    }
}

/// –ö–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
pub struct NetworkBus {
    pub sender: mpsc::Sender<Message>,
    pub receiver: Arc<Mutex<mpsc::Receiver<Message>>>,
}

impl NetworkBus {
    pub fn new(buffer: usize) -> Self {
        let (tx, rx) = mpsc::channel(buffer);
        Self {
            sender: tx,
            receiver: Arc::new(Mutex::new(rx)),
        }
    }

    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    pub async fn send(&self, msg: Message) {
        if let Err(e) = self.sender.send(msg).await {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e);
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pub async fn receive(&self) -> Option<Message> {
        let mut rx = self.receiver.lock().await;
        rx.recv().await
    }
}

/// –ü—Ä–∏–º–µ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–æ–¥—ã –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
pub async fn handle_message(node: Arc<Mutex<Node>>, msg: Message, network: Arc<NetworkBus>) {
    let mut n = node.lock().await;

    match msg.msg_type {
        MessageType::HelpRequest => {
            // –ï—Å–ª–∏ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî –ø–æ–º–æ–≥–∞–µ–º
            let current_energy = n.energy.lock().await.level;
            if current_energy > 30.0 && n.altruism > 0.5 {
                let response = Message::new(
                    &n.name,
                    msg.to.as_deref(),
                    MessageType::EnergyTransfer,
                    5.0,
                    Some("–ü–æ–º–æ–≥–∞—é —Å–æ—Å–µ–¥—É üîã"),
                );
                network.send(response).await;
                println!("ü§ù {} –æ—Ç–ø—Ä–∞–≤–∏–ª —ç–Ω–µ—Ä–≥–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É {}", n.name, msg.from);
            }
        }

        MessageType::EnergyTransfer => {
            let mut energy = n.energy.lock().await;
            energy.restore(msg.value);
            println!("üîã {} –ø–æ–ª—É—á–∏–ª {:.1} —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç {}", n.name, msg.value, msg.from);
        }

        MessageType::BlockAnnouncement => {
            println!("üß± {} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ –æ—Ç {}", n.name, msg.from);
        }

        MessageType::ValidateBlock => {
            println!("üßê {} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫ –æ—Ç {}", n.name, msg.from);
        }
    }
}
