use crate::synapse::SynapseChain;
use crate::chain::Chain;
use crate::neuron::Neuron;
use crate::energy::Energy;
use crate::wallet::Wallet; 
use rand::{Rng, SeedableRng};
use rand::rngs::StdRng;
use serde_json;
use std::sync::Arc;
use tokio::sync::Mutex;
use log::info;
use serde_json::json;   
use crate::interaction::NetworkBus;
use crate::interaction::Message;

const DECAY_PER_TICK: f64 = 1.0;
const REPLICATION_THRESHOLD: f64 = 1.0; // –≤–º–µ—Å—Ç–æ 80
const REPRODUCTION_COST: f64 = 0.0;
const MUTATION_RATE: f64 = 0.05;




#[derive(Clone)]
pub struct Node {
    pub name: String,
    pub energy: Arc<Mutex<Energy>>, // ‚úÖ —Ç–µ–ø–µ—Ä—å –Ω–µ f64, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
    pub efficiency: f64,
    pub altruism: f64,
    pub resilience: f64,
    pub experience: f64,
    pub data_chain: Arc<Mutex<Chain>>,
    pub key_chain: Arc<Mutex<Chain>>,
    pub synapse_chain: Arc<Mutex<SynapseChain>>,
    pub connections: Arc<Mutex<Vec<String>>>, // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º
    pub neurons: Arc<Mutex<Vec<Neuron>>>,     // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º
    pub wallet: Wallet,
    pub rng: Arc<Mutex<StdRng>>,
}

impl Node {
    
    // === –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã ===
    pub fn new(name: &str) -> Arc<Mutex<Node>> {
        Arc::new(Mutex::new(Node {
            name: name.to_string(),
            energy: Arc::new(Mutex::new(Energy::new(name))),
            efficiency: 1.0,
            altruism: 0.5,
            resilience: 0.5,
            experience: 0.0,
            data_chain: Arc::new(Mutex::new(Chain::new(&format!("{}_data", name)))),
            key_chain: Arc::new(Mutex::new(Chain::new(&format!("{}_key", name)))),
            synapse_chain: Arc::new(Mutex::new(SynapseChain::new())),
            connections: Arc::new(Mutex::new(vec![])),
            neurons: Arc::new(Mutex::new(vec![])),
            wallet: Wallet::new(),
            rng: Arc::new(Mutex::new(StdRng::from_entropy())),
        }))
        /* Self {
            name: name.to_string(),
            energy: Arc::new(Mutex::new(Energy::new(name))), // ‚úÖ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            efficiency: 1.0,
            altruism: 0.5,
            resilience: 1.0,
            experience: 0.0,
            data_chain: Arc::new(Mutex::new(Chain::new(&format!("{}_data", name)))),
            key_chain: Arc::new(Mutex::new(Chain::new(&format!("{}_key", name)))),
            synapse_chain: Arc::new(Mutex::new(SynapseChain::new())),
            connections: Arc::new(Mutex::new(vec![])),
            neurons: Arc::new(Mutex::new(vec![])),
            wallet: Wallet::new(),
            rng: Arc::new(Mutex::new(StdRng::from_entropy())),
        } */
    }

    /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω—ã –≤ JSON –¥–ª—è –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
    pub async fn export_neurons_json(&self) -> String {
        let neurons = self.neurons.lock().await;
        serde_json::to_string(&*neurons).unwrap_or_else(|_| "[]".into())
    }

    /// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω—ã –∏–∑ JSON (–æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    pub async fn import_neurons_json(&mut self, json_data: &str) {
        if let Ok(neurons) = serde_json::from_str::<Vec<Neuron>>(json_data) {
            println!("üß¨ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {} –Ω–µ–π—Ä–æ–Ω–æ–≤", neurons.len());
            *self.neurons.lock().await = neurons;
        } else {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–µ–π—Ä–æ–Ω–æ–≤");
        }
    }
    pub fn mine_block(&mut self) {
        println!("‚õèÔ∏è  Node {} mined a new block!", self.name);
        // –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ü–µ–ø–æ—á–∫–æ–π, —ç–Ω–µ—Ä–≥–∏–µ–π –∏ —Ç.–ø.
        self.wallet.deposit(2.0); // –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫
        println!("üí∞ {} –ø–æ–ª—É—á–∏–ª 2 —Ç–æ–∫–µ–Ω–∞ –∑–∞ –¥–æ–±—ã—á—É –±–ª–æ–∫–∞!", self.name);

    }
    pub async fn get_chain_summary(&self) -> Vec<String> {
        let chain = self.data_chain.lock().await; // –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

            chain
                .blocks
                .iter()
                .map(|b| format!("Block {}: {}", b.index, b.hash))
                .collect()
    }
    
    pub async fn latest_block_json(&self) -> String {
        if let Some(last_block) = self.data_chain.lock().await.blocks.last() {
            serde_json::to_string(&json!({
                "index": last_block.index,
                "data_root": last_block.data_root,
                "key_root": last_block.key_root,
                "validator": last_block.validator,
                "hash": last_block.hash
            })).unwrap()
        } else {
            "{}".into()
        }
    }

    // === –ö–ª–æ–Ω –¥–ª—è —Å–µ—Ç–∏ ===
    pub fn clone_for_net(&self) -> Self {
        Self {
            name: self.name.clone(),
            energy: Arc::clone(&self.energy),
            efficiency: self.efficiency,
            altruism: self.altruism,
            resilience: self.resilience,
            experience: self.experience,
            data_chain: Arc::clone(&self.data_chain),
            key_chain: Arc::clone(&self.key_chain),
            synapse_chain: Arc::clone(&self.synapse_chain),
            connections: Arc::clone(&self.connections),
            neurons: Arc::clone(&self.neurons), 
            wallet: self.wallet.clone(),
            rng: Arc::clone(&self.rng),
        }
    }
    // === –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±—ã—á–∏ –¥–∞–Ω–Ω—ã—Ö ===
    pub async fn mine_data(&self) -> (String, String) {
        let data_root = format!("{:x}", rand::random::<u64>());
        let key_root = format!("{:x}", rand::random::<u64>());
        (data_root, key_root)
    }

    // === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ ===
    pub async fn finalize_keyblock(&self, data_root: String, key_root: String, winner: &str) {
        let mut kchain = self.key_chain.lock().await;
        kchain.add_block(data_root, key_root, winner.to_string());
        println!("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä {} –∑–∞–∫—Ä—ã–ª KeyBlock", winner);
    }

    // === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ===
    pub async fn last_blocks_json(&self) -> String {
        let d = self.data_chain.lock().await;
        let k = self.key_chain.lock().await;
        serde_json::json!({
            "data_chain": d.blocks,
            "key_chain": k.blocks,
        })
        .to_string()
    }

    // === –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç —Å–µ—Ç–∏ ===
    pub async fn add_blocks_from_json(&self, json_str: String) {
        let parsed: serde_json::Value = serde_json::from_str(&json_str).unwrap_or_default();
        let mut d = self.data_chain.lock().await;
        let mut k = self.key_chain.lock().await;
        if let Some(data_blocks) = parsed["data_chain"].as_array() {
            for b in data_blocks {
                if let Some(val) = b["validator"].as_str() {
                    d.add_block("sync".into(), "sync".into(), val.to_string());
                }
            }
        }
        if let Some(key_blocks) = parsed["key_chain"].as_array() {
            for b in key_blocks {
                if let Some(val) = b["validator"].as_str() {
                    k.add_block("sync".into(), "sync".into(), val.to_string());
                }
            }
        }
        println!("üîó –ù–æ–¥–∞ {} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –±–ª–æ–∫–∏ –∏–∑ —Å–µ—Ç–∏", self.name);
    }
    

    // === –û—Å–Ω–æ–≤–Ω–æ–π PoC –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–æ–≤ ===
    pub async fn try_commit_keyblock(&mut self, data_root: String, key_root: String) -> (u64, bool) {
        let mut energy = self.energy.lock().await;

        if energy.level <= 0.0 {
            println!("üò¥ {} —É—Å—Ç–∞–ª –∏ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç", self.name);
            return (0, false);
        }

        energy.consume(5.0);
        energy.restore(0.5);
        println!("üß† {} –æ–±—É—á–∞–µ—Ç DataChain... (—ç–Ω–µ—Ä–≥–∏—è = {:.2})", self.name, energy.level);
         

        let proof_value: u64 = rand::random::<u64>() % 500;
        println!("‚öîÔ∏è {} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ PoC, –∑–Ω–∞—á–µ–Ω–∏–µ: {}", self.name, proof_value);
        println!("‚öôÔ∏è {} –ø—Ä–µ–¥–ª–æ–∂–∏–ª commit {}", self.name, proof_value);

        if proof_value > 250 {
            println!("üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å PoC ‚Äî {}", self.name);

            let chain_len = {
                let chain = self.data_chain.lock().await;
                chain.blocks.len()
            };

            let mut neuron = Neuron::new(chain_len as u64, 3);
            let inputs = vec![rand::random::<f64>(), rand::random::<f64>(), rand::random::<f64>()];
            let expected = if inputs.iter().sum::<f64>() > 1.5 { 1.0 } else { 0.0 };
            let lr = 0.1;
            let loss = neuron.learn(&inputs, expected, lr);

            println!(
                "üß© –ù–µ–π—Ä–æ–Ω #{} => –≤—Ö–æ–¥—ã: {:?}, –≤—ã—Ö–æ–¥: {:.4}, –æ—à–∏–±–∫–∞: {:.6}",
                neuron.id, inputs, neuron.value, loss
            );
            // === üß¨ —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω–∞–ø—Å –º–µ–∂–¥—É –Ω–æ–≤—ã–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –Ω–µ–π—Ä–æ–Ω–æ–º ===
            let mut synapses = self.synapse_chain.lock().await;
            if neuron.id > 0 {
                let weight: f64 = rand::random();
                synapses.connect(neuron.id - 1, neuron.id, weight);
                synapses.save_to_file().unwrap_or_else(|e| println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SynapseChain: {}", e));

                println!("üîó –°–æ–∑–¥–∞–Ω —Å–∏–Ω–∞–ø—Å: {} -> {} (–≤–µ—Å {:.4})", neuron.id - 1, neuron.id, weight);
            }

            let neuron_json = serde_json::to_string(&neuron).unwrap();

            {
                let mut dchain = self.data_chain.lock().await;
                dchain.add_block(neuron_json, "key_placeholder".into(), self.name.clone());
            }

            {
                let mut kchain = self.key_chain.lock().await;
                kchain.add_block("data_hash".into(), key_root.clone(), self.name.clone());
            }

            println!("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–ª–æ–∫ Data+Key (–Ω–µ–π—Ä–æ–Ω –æ–±—É—á–µ–Ω)");

            energy.restore(10.0);
             
            println!("‚ö° {} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —ç–Ω–µ—Ä–≥–∏—é: {:.2}", self.name, energy.level);
             

            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—á—å —Å–æ—Å–µ–¥—É (—Å–ª—É—á–∞–π–Ω–æ)
            use rand::seq::SliceRandom;
            let mut rng = StdRng::from_entropy();
            let maybe_peer = ["Node-4000", "Node-4001", "Node-4002"].choose(&mut rng).unwrap();

            if maybe_peer != &self.name {
                println!("ü§ù {} –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å {}", self.name, maybe_peer);
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±–º–µ–Ω –ø–æ —Å–µ—Ç–∏, –∞ –ø–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥
            }
        }
 
        if energy.level > 40.0 {
            // —à–∞–Ω—Å —Ä–∞–∑–º–Ω–æ–∂–∏—Ç—å—Å—è —Ä–∞—Å—Ç—ë—Ç —Å —ç–Ω–µ—Ä–≥–∏–µ–π
            let chance = (energy.level / 200.0).clamp(0.05, 0.5); // 5‚Äì50%
            if rand::random::<f64>() < chance {
                println!("üß¨ [tick] {} —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Ç–æ–º–∫–∞ (—à–∞–Ω—Å {:.2})", self.name, chance);
                // –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ø–∏
                // ...
            }
        }
        let mut rng = StdRng::from_entropy();
        let commit_value: u64 = rng.gen_range(1..=1000); 
        info!("‚öîÔ∏è {} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ PoC, –∑–Ω–∞—á–µ–Ω–∏–µ: {}", self.name, commit_value); 
        
        // ‚úÖ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
        (commit_value, true)
    }
    pub async fn try_merge_chain_json(&mut self, json: String) {
        if let Ok(other_chain) = serde_json::from_str::<crate::chain::Chain>(&json) {
            // üîí –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
            let mut current_chain = self.data_chain.lock().await;

            if other_chain.blocks.len() > current_chain.blocks.len() {
                println!(
                    "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É: {} ‚Üí {} –±–ª–æ–∫–æ–≤",
                    current_chain.blocks.len(),
                    other_chain.blocks.len()
                );

                *current_chain = other_chain;
                let _ = current_chain.save_to_file();
            } else {
                println!(
                    "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ ({} –±–ª–æ–∫–æ–≤)",
                    current_chain.blocks.len()
                );
            }
        } else {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
        }
    }

    // === –≠–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ ===
    pub async fn share_energy(&mut self, target: &mut Node) {

        let mut my_energy = self.energy.lock().await;
        let mut target_energy = target.energy.lock().await;

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–º–æ—â–∏
        if my_energy.level < 30.0 {
            println!("üí§ {} —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π", self.name);
            return;
        }

        // –ü–æ–º–æ–≥–∞–µ–º, –µ—Å–ª–∏ —É —Ü–µ–ª–∏ –º–µ–Ω—å—à–µ 20
        if target_energy.level < 20.0 {
            let transfer = (my_energy.level * 0.1).min(10.0);
            my_energy.consume(transfer);
            target_energy.restore(transfer);

            println!(
                "üîã {} –ø–µ—Ä–µ–¥–∞–ª {:.2} —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–¥–µ {} (—Ç–µ–ø–µ—Ä—å —É {}: {:.2}, —É {}: {:.2})",
                self.name,
                transfer,
                target.name,
                self.name,
                my_energy.level,
                target.name,
                target_energy.level
            );
        }
    }

    /// –û–¥–∏–Ω "—à–∞–≥ –∂–∏–∑–Ω–∏" —É–∑–ª–∞ ‚Äî –º–µ—Ç–∞–±–æ–ª–∏–∑–º, –¥–µ–π—Å—Ç–≤–∏–µ, –æ–±—É—á–µ–Ω–∏–µ, —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è
    pub async fn tick(
        node_arc: Arc<Mutex<Node>>,
        net: Arc<NetworkBus>,
        nodes_ref: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>,
        tick_counter: u64,
    ) -> Option<Arc<Mutex<Node>>> {
        let mut guard = node_arc.lock().await;
        guard.tick_node(net, nodes_ref, tick_counter).await
    }

    pub async fn tick_node(
        &mut self,
        net: Arc<NetworkBus>,
        nodes_ref: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>,
        tick_counter: u64,
    ) -> Option<Arc<Mutex<Node>>> {
        // === 1. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π decay ===
        {
            let mut e = self.energy.lock().await;
            e.level = (e.level - DECAY_PER_TICK).max(0.0);
        }

        // === 2. –°–º–µ—Ä—Ç—å –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —ç–Ω–µ—Ä–≥–∏–∏ ===
        if self.energy.lock().await.level <= 0.0 {
            println!("‚ò†Ô∏è Node {} died at tick {}", self.name, tick_counter);
            return None;
        }

        // === 3. –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –ø–æ–º–æ—â—å –∏–ª–∏ —Ä–∞–±–æ—Ç–∞ === 
        let mut action = String::from("idle");
        let energy_level = { 
            let e = self.energy.lock().await;
            e.level
        };

         
        let mut rng = StdRng::from_entropy(); // —Å–æ–∑–¥–∞—ë–º RNG —É–∂–µ –ø–æ—Å–ª–µ await
        if rng.gen::<f64>() < self.altruism && energy_level > 1.0 {
            // —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏
            let node_list_copy: Vec<Arc<Mutex<Node>>> = {
                let nodes_locked = nodes_ref.lock().await;
                nodes_locked.clone()
            };

            let mut candidates: Vec<Arc<Mutex<Node>>> = Vec::new();
            for node_ref in node_list_copy.iter() {
                if let Ok(node_guard) = node_ref.try_lock() {  
                    let energy_alive = node_guard.energy.lock().await.level > 0.0;
                    if node_guard.name != self.name && energy_alive {
                        candidates.push(node_ref.clone());
                    }
                }
            }

            if !candidates.is_empty() {
                let target_arc = {
                    let mut rng = StdRng::from_entropy();
                    candidates[rng.gen_range(0..candidates.len())].clone()
                };

                if target_arc.lock().await.name == self.name {
                    return None; // –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
                }
                let target_name = target_arc.lock().await.name.clone();
                let msg = Message::new_energy_transfer(&self.name, &target_name, 5.0);
                net.send(msg).await;

                let mut my_energy = self.energy.lock().await;
                my_energy.level = (my_energy.level - 1.0).max(0.0);
                println!("üîã {} shared energy with {}", self.name, target_name);
            }
        } else {
            // —Ä–∞–±–æ—Ç–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
            let reward = rng.gen_range(2.0..5.0) * (1.0 + self.efficiency);
            let mut e = self.energy.lock().await;
            e.level += reward;
            action = format!("worked +{:.2}", reward);
        }
        
        // === 4. –û–±—É—á–µ–Ω–∏–µ ===
        self.local_learn().await;
        
        // === 5. –†–µ–ø–ª–∏–∫–∞—Ü–∏—è ===
        let energy_val = self.energy.lock().await.level;
        println!(
            "üîé [DEBUG] {} energy before replication check = {:.2} (threshold = {:.2})",
            self.name, energy_val, REPLICATION_THRESHOLD
        );
        if energy_val > REPLICATION_THRESHOLD {
             
            let child = self.spawn_child().await;
            {
                
                let mut e = self.energy.lock().await;
                e.level = (e.level - REPRODUCTION_COST).max(0.0);
                
            }
            let (child_name, eff, alt) = {
                let c = child.lock().await;
                (c.name.clone(), c.efficiency, c.altruism)
            };

            println!(
                "üå± {} replicated -> {} (eff={:.2}, alt={:.2})",
                self.name, child_name, eff, alt
            );
            
            return Some(child);
        }
         
        // === 6. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
        println!(
            "üß† {} action: {} | energy: {:.2}",
            self.name,
            action,
            self.energy.lock().await.level
        );

        None
    }
    async fn local_learn(&mut self) {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è altruism –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —ç–Ω–µ—Ä–≥–∏–∏
        let energy = self.energy.lock().await.level;
        if energy > 150.0 {
            self.altruism = (self.altruism + 0.002).min(1.0);
        } else if energy < 50.0 {
            self.altruism = (self.altruism - 0.002).max(0.0);
        }
    }
    async fn spawn_child(&self) -> Arc<Mutex<Node>> {

        println!("‚Ü™ [tick] node={} before action energy={:.2} altruism={:.2} efficiency={:.2}",  self.name, self.energy.lock().await.level, self.altruism, self.efficiency);
 
        let child_name = format!("{}_child_{}", self.name, chrono::Utc::now().timestamp_millis());

        // `Node::new` —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Arc<Mutex<Node>>
        let child = Node::new(&child_name);

        {
            let parent_energy = { self.energy.lock().await.level };

            // –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë–º RNG
            let mut rng = StdRng::from_entropy();
            let extra_energy = rng.gen_range(5.0..15.0);

            // —Ç–µ–ø–µ—Ä—å lock child –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º
            let mut child_guard = child.lock().await;
            child_guard.altruism = (self.altruism + rng.gen_range(-MUTATION_RATE..MUTATION_RATE)).clamp(0.0, 1.0);
            let mut child_energy = child_guard.energy.lock().await;
            child_energy.level = parent_energy * 0.3;
            child_energy.level += extra_energy;
        }
        println!("‚Ü© [tick] node={} after action energy={:.2}", self.name, self.energy.lock().await.level);  
        child
    }
}