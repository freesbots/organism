use crate::synapse::SynapseChain;
use crate::chain::Chain;
use crate::neuron::Neuron;
use crate::energy::Energy;
use rand::{thread_rng, Rng};
use serde_json;
use std::sync::{Arc, Mutex};
use log::info;
use serde_json::json; 



#[derive(Clone)]
pub struct Node {
    pub name: String,
    pub energy: Arc<Mutex<Energy>>, // ‚úÖ —Ç–µ–ø–µ—Ä—å –Ω–µ f64, –∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
    pub efficiency: f64,
    pub altruism: f64,
    pub resilience: f64,
    pub experience: f64,
    pub data_chain: Arc<Mutex<Chain>>,
    pub key_chain: Arc<Mutex<Chain>>,
    pub synapse_chain: Arc<Mutex<SynapseChain>>,
    pub connections: Arc<Mutex<Vec<String>>>, // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º
    pub neurons: Arc<Mutex<Vec<Neuron>>>,     // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º
}

impl Node {
    
    // === –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–¥—ã ===
    pub fn new(name: &str) -> Self {
        Self {
            name: name.to_string(),
            energy: Arc::new(Mutex::new(Energy::new(name))), // ‚úÖ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            efficiency: 1.0,
            altruism: 0.5,
            resilience: 1.0,
            experience: 0.0,
            data_chain: Arc::new(Mutex::new(Chain::new(&format!("{}_data", name)))),
            key_chain: Arc::new(Mutex::new(Chain::new(&format!("{}_key", name)))),
            synapse_chain: Arc::new(Mutex::new(SynapseChain::new())),
            connections: Arc::new(Mutex::new(vec![])),
            neurons: Arc::new(Mutex::new(vec![])),
        }
    }

    /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω—ã –≤ JSON –¥–ª—è –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
    pub fn export_neurons_json(&self) -> String {
        let neurons = self.neurons.lock().unwrap();
        serde_json::to_string(&*neurons).unwrap_or_else(|_| "[]".into())
    }

    /// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω—ã –∏–∑ JSON (–æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    pub fn import_neurons_json(&mut self, json_data: &str) {
        if let Ok(neurons) = serde_json::from_str::<Vec<Neuron>>(json_data) {
            println!("üß¨ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {} –Ω–µ–π—Ä–æ–Ω–æ–≤", neurons.len());
            *self.neurons.lock().unwrap() = neurons;
        } else {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–µ–π—Ä–æ–Ω–æ–≤");
        }
    }
    
    pub fn latest_block_json(&self) -> String {
        if let Some(b) = self.data_chain.lock().unwrap().blocks.last() {
            serde_json::to_string(&json!({
                "index": b.index,
                "data_root": b.data_root,
                "key_root": b.key_root,
                "validator": b.validator,
                "hash": b.hash
            })).unwrap()
        } else {
            "{}".into()
        }
    }

    // === –ö–ª–æ–Ω –¥–ª—è —Å–µ—Ç–∏ ===
    pub fn clone_for_net(&self) -> Self {
        Self {
            name: self.name.clone(),
            energy: Arc::clone(&self.energy),
            efficiency: self.efficiency,
            altruism: self.altruism,
            resilience: self.resilience,
            experience: self.experience,
            data_chain: Arc::clone(&self.data_chain),
            key_chain: Arc::clone(&self.key_chain),
            synapse_chain: Arc::clone(&self.synapse_chain),
            connections: Arc::clone(&self.connections),
            neurons: Arc::clone(&self.neurons),
        }
    }
    // === –°–∏–º—É–ª—è—Ü–∏—è –¥–æ–±—ã—á–∏ –¥–∞–Ω–Ω—ã—Ö ===
    pub fn mine_data(&self) -> (String, String) {
        let data_root = format!("{:x}", rand::random::<u64>());
        let key_root = format!("{:x}", rand::random::<u64>());
        (data_root, key_root)
    }

    // === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ ===
    pub fn finalize_keyblock(&self, data_root: String, key_root: String, winner: &str) {
        let mut kchain = self.key_chain.lock().unwrap();
        kchain.add_block(data_root, key_root, winner.to_string());
        println!("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä {} –∑–∞–∫—Ä—ã–ª KeyBlock", winner);
    }

    // === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ===
    pub fn last_blocks_json(&self) -> String {
        let d = self.data_chain.lock().unwrap();
        let k = self.key_chain.lock().unwrap();
        serde_json::json!({
            "data_chain": d.blocks,
            "key_chain": k.blocks,
        })
        .to_string()
    }

    // === –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç —Å–µ—Ç–∏ ===
    pub fn add_blocks_from_json(&self, json_str: String) {
        let parsed: serde_json::Value = serde_json::from_str(&json_str).unwrap_or_default();
        let mut d = self.data_chain.lock().unwrap();
        let mut k = self.key_chain.lock().unwrap();
        if let Some(data_blocks) = parsed["data_chain"].as_array() {
            for b in data_blocks {
                if let Some(val) = b["validator"].as_str() {
                    d.add_block("sync".into(), "sync".into(), val.to_string());
                }
            }
        }
        if let Some(key_blocks) = parsed["key_chain"].as_array() {
            for b in key_blocks {
                if let Some(val) = b["validator"].as_str() {
                    k.add_block("sync".into(), "sync".into(), val.to_string());
                }
            }
        }
        println!("üîó –ù–æ–¥–∞ {} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –±–ª–æ–∫–∏ –∏–∑ —Å–µ—Ç–∏", self.name);
    }
    

    // === –û—Å–Ω–æ–≤–Ω–æ–π PoC –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–æ–≤ ===
    pub fn try_commit_keyblock(&mut self, data_root: String, key_root: String) -> (u64, bool) {
        let mut energy = self.energy.lock().unwrap();

        if energy.level <= 0.0 {
            println!("üò¥ {} —É—Å—Ç–∞–ª –∏ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç", self.name);
            return (0, false);
        }

        energy.consume(5.0);
        energy.restore(0.5);
        println!("üß† {} –æ–±—É—á–∞–µ—Ç DataChain... (—ç–Ω–µ—Ä–≥–∏—è = {:.2})", self.name, energy.level);
         

        let proof_value: u64 = rand::random::<u64>() % 500;
        println!("‚öîÔ∏è {} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ PoC, –∑–Ω–∞—á–µ–Ω–∏–µ: {}", self.name, proof_value);
        println!("‚öôÔ∏è {} –ø—Ä–µ–¥–ª–æ–∂–∏–ª commit {}", self.name, proof_value);

        if proof_value > 250 {
            println!("üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å PoC ‚Äî {}", self.name);

            let chain_len = {
                let chain = self.data_chain.lock().unwrap();
                chain.blocks.len()
            };

            let mut neuron = Neuron::new(chain_len as u64, 3);
            let inputs = vec![rand::random::<f64>(), rand::random::<f64>(), rand::random::<f64>()];
            let expected = if inputs.iter().sum::<f64>() > 1.5 { 1.0 } else { 0.0 };
            let lr = 0.1;
            let loss = neuron.learn(&inputs, expected, lr);

            println!(
                "üß© –ù–µ–π—Ä–æ–Ω #{} => –≤—Ö–æ–¥—ã: {:?}, –≤—ã—Ö–æ–¥: {:.4}, –æ—à–∏–±–∫–∞: {:.6}",
                neuron.id, inputs, neuron.value, loss
            );
            // === üß¨ —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω–∞–ø—Å –º–µ–∂–¥—É –Ω–æ–≤—ã–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –Ω–µ–π—Ä–æ–Ω–æ–º ===
            let mut synapses = self.synapse_chain.lock().unwrap();
            if neuron.id > 0 {
                let weight: f64 = rand::random();
                synapses.connect(neuron.id - 1, neuron.id, weight);
                synapses.save_to_file().unwrap_or_else(|e| println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SynapseChain: {}", e));

                println!("üîó –°–æ–∑–¥–∞–Ω —Å–∏–Ω–∞–ø—Å: {} -> {} (–≤–µ—Å {:.4})", neuron.id - 1, neuron.id, weight);
            }

            let neuron_json = serde_json::to_string(&neuron).unwrap();

            {
                let mut dchain = self.data_chain.lock().unwrap();
                dchain.add_block(neuron_json, "key_placeholder".into(), self.name.clone());
            }

            {
                let mut kchain = self.key_chain.lock().unwrap();
                kchain.add_block("data_hash".into(), key_root.clone(), self.name.clone());
            }

            println!("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–ª–æ–∫ Data+Key (–Ω–µ–π—Ä–æ–Ω –æ–±—É—á–µ–Ω)");

            energy.restore(10.0);
             
            println!("‚ö° {} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —ç–Ω–µ—Ä–≥–∏—é: {:.2}", self.name, energy.level);
             

            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–º–æ—á—å —Å–æ—Å–µ–¥—É (—Å–ª—É—á–∞–π–Ω–æ)
            use rand::seq::SliceRandom;
            let mut rng = thread_rng();
            let maybe_peer = ["Node-4000", "Node-4001", "Node-4002"].choose(&mut rng).unwrap();

            if maybe_peer != &self.name {
                println!("ü§ù {} –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å {}", self.name, maybe_peer);
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±–º–µ–Ω –ø–æ —Å–µ—Ç–∏, –∞ –ø–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥
            }
        }
 
        if energy.level > 100.0 {
            energy.level = 100.0;
        }
        let mut rng = thread_rng();
        let commit_value: u64 = rng.gen_range(1..=1000);
        info!("‚öîÔ∏è {} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ PoC, –∑–Ω–∞—á–µ–Ω–∏–µ: {}", self.name, commit_value); 
        
        // ‚úÖ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
        (commit_value, true)
    }
    pub fn try_merge_chain_json(&mut self, json: String) {
        if let Ok(other_chain) = serde_json::from_str::<crate::chain::Chain>(&json) {
            // üîí –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
            let mut current_chain = self.data_chain.lock().unwrap();

            if other_chain.blocks.len() > current_chain.blocks.len() {
                println!(
                    "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É: {} ‚Üí {} –±–ª–æ–∫–æ–≤",
                    current_chain.blocks.len(),
                    other_chain.blocks.len()
                );

                *current_chain = other_chain;
                let _ = current_chain.save_to_file();
            } else {
                println!(
                    "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ ({} –±–ª–æ–∫–æ–≤)",
                    current_chain.blocks.len()
                );
            }
        } else {
            println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
        }
    }

    // === –≠–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ ===
    pub fn share_energy(&mut self, target: &mut Node) {

        let mut my_energy = self.energy.lock().unwrap();
        let mut target_energy = target.energy.lock().unwrap();

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–º–æ—â–∏
        if my_energy.level < 30.0 {
            println!("üí§ {} —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π", self.name);
            return;
        }

        // –ü–æ–º–æ–≥–∞–µ–º, –µ—Å–ª–∏ —É —Ü–µ–ª–∏ –º–µ–Ω—å—à–µ 20
        if target_energy.level < 20.0 {
            let transfer = (my_energy.level * 0.1).min(10.0);
            my_energy.consume(transfer);
            target_energy.restore(transfer);

            println!(
                "üîã {} –ø–µ—Ä–µ–¥–∞–ª {:.2} —ç–Ω–µ—Ä–≥–∏–∏ –Ω–æ–¥–µ {} (—Ç–µ–ø–µ—Ä—å —É {}: {:.2}, —É {}: {:.2})",
                self.name,
                transfer,
                target.name,
                self.name,
                my_energy.level,
                target.name,
                target_energy.level
            );
        }
    }
}