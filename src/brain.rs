use std::sync::Arc;
use serde::{Serialize};
use tokio::sync::Mutex;
use tokio::time::{interval, Duration}; 
use crate::memory::{Memory, BrainEvent};
use tokio::sync::Mutex as TMutex;
use chrono::Utc;
use rand::{SeedableRng, rngs::StdRng};
use rand::Rng; 

use crate::node::Node;
use crate::economy::NetworkFund;
use tokio::sync::RwLock;  

/// üß† –ú–æ–¥—É–ª—å —Å–æ–∑–Ω–∞–Ω–∏—è ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏. 

#[derive(Serialize, Clone)]
pub struct NodeEnergyInfo {
    pub name: String,
    pub energy: f64,
    pub experience: f64,
}

#[derive(Serialize, Clone)]
pub struct BrainState {
    pub nodes: Vec<NodeEnergyInfo>,
    pub summary_avg_energy: f64,
}
#[derive(Clone)]
pub struct Brain {
    pub memory: Memory,
    pub aggressiveness: f64,
    pub reward_history: Vec<f64>, 
}
 

#[derive(Clone, Debug, serde::Serialize)]
pub struct BrainSnapshot {
    pub aggressiveness: f64,
    pub avg_recent_result: f64,
    pub recent_memory: Vec<BrainEvent>, 
    pub last_update: i64,
}

impl BrainSnapshot { 
    pub fn from_brain(brain: &Brain, avg: f64, recent_memory: Vec<BrainEvent>) -> Self {
        Self {
            aggressiveness: brain.aggressiveness,
            avg_recent_result: avg,
            recent_memory,
            last_update: Utc::now().timestamp(),
        }
    }

    pub async fn from_brain_lock(brain_lock: &Arc<RwLock<Brain>>) -> Self {
        let brain = brain_lock.read().await;
        let avg = brain.memory.average_result(20).await;
        let mem = brain.memory.get_recent(10).await;
        Self::from_brain(&brain, avg, mem)
    }
}



impl Brain {
    pub fn new() -> Self {
        Self {
            memory: Memory::new(100, 10000, 604800), // short=100, long=10000
            aggressiveness: 1.0,
            reward_history: Vec::new(),
        }
    }
    /// –û—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è.
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞—Å–∫–∞: Brain::run(...).await
    pub async fn run(
        &mut self,
        nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>,
        fund: Arc<Mutex<NetworkFund>>,
    ) {
        

        println!("üß† [Brain::run] –¶–∏–∫–ª –º–æ–∑–≥–∞ –∑–∞–ø—É—â–µ–Ω!");

        let mut ticker = interval(Duration::from_secs(5));
        let mut rng = StdRng::from_entropy();

        loop {
            ticker.tick().await;

            // === 1Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–æ–≤ ===
            let snapshot_nodes = {
                let guard = nodes.lock().await;
                guard.clone()
            };

            let mut energy_data = Vec::new();
            for n in snapshot_nodes.iter() {
                if let Ok(node) = n.try_lock() {
                    let e = node.energy.lock().await;
                    energy_data.push((node.name.clone(), e.level, node.experience));
                }
            }

            if energy_data.is_empty() {
                println!("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
                continue;
            }

            // === 2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ ===
            let avg_energy = energy_data.iter().map(|(_, e, _)| *e).sum::<f64>() / energy_data.len() as f64;
            self.memory.add_event(BrainEvent::new("analyze", "–°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è —Å–µ—Ç–∏", avg_energy)).await;

            // === 3Ô∏è‚É£ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è ===
            let action = if self.aggressiveness > 1.0 { "evolve" } else { "help" };
            println!("üß© –†–µ—à–µ–Ω–∏–µ: {}", action);

            // === 4Ô∏è‚É£ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ===
            let result_metric = match action {
                "help" => {
                    self.redistribute_energy(&snapshot_nodes, &fund, avg_energy).await;
                    rng.gen_range(0.7..1.0) // —É—Å–ø–µ—à–Ω–∞—è –ø–æ–º–æ—â—å
                }
                "evolve" => {
                    self.evolve_network(&snapshot_nodes).await;
                    rng.gen_range(0.0..1.0) // —ç–≤–æ–ª—é—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–π
                }
                _ => 0.5,
            };

            // === 5Ô∏è‚É£ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
            self.memory
                .add_event(BrainEvent::new("feedback", "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è", result_metric))
                .await;

            // === 6Ô∏è‚É£ –ê–¥–∞–ø—Ç–∞—Ü–∏—è (–æ–±—É—á–µ–Ω–∏–µ) ===
            self.learn_from_feedback(result_metric).await;

            // === 7Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===
            let recent_avg = self.memory.average_result(10).await;
            println!(
                "üß† Brain: avg_energy = {:.2}, result = {:.2}, aggr = {:.2}, recent_avg = {:.2}",
                avg_energy, result_metric, self.aggressiveness, recent_avg
            );

            // === 8Ô∏è‚É£ –°–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏—è ===
            if recent_avg < 0.4 {
                self.aggressiveness *= 1.15;
                self.memory
                    .add_event(BrainEvent::new("adjust", "–†–æ—Å—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.aggressiveness))
                    .await;
                println!("‚ö° –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ ‚Üí {:.2}", self.aggressiveness);
            } else if recent_avg > 0.8 {
                self.aggressiveness *= 0.9;
                self.memory
                    .add_event(BrainEvent::new("adjust", "–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.aggressiveness))
                    .await;
                println!("üåø –°–Ω–∏–∂–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ ‚Üí {:.2}", self.aggressiveness);
            }

            // –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ü–∏–∫–ª
            tokio::time::sleep(Duration::from_secs(1)).await;
        }
    }

    /// üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ (help mode)
    pub async fn redistribute_energy(
        &mut self,
        snapshot_nodes: &Vec<Arc<Mutex<Node>>>,
        fund: &Arc<Mutex<NetworkFund>>,
        avg_energy: f64,
    ) {
        if snapshot_nodes.is_empty() {
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —ç–Ω–µ—Ä–≥–∏–∏
        let mut energy_list: Vec<(String, f64)> = Vec::new();
        for n in snapshot_nodes.iter() {
            if let Ok(node) = n.try_lock() {
                let e = node.energy.lock().await;
                energy_list.push((node.name.clone(), e.level));
            }
        }

        if energy_list.len() < 2 {
            return;
        }

        energy_list.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or(std::cmp::Ordering::Equal));

        let (lowest_name, lowest_energy) = energy_list.first().unwrap();
        let (highest_name, highest_energy) = energy_list.last().unwrap();

        if highest_energy - lowest_energy < 5.0 {
            // –†–∞–∑–±—Ä–æ—Å –º–∞–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return;
        }

        let delta = (highest_energy - lowest_energy) * 0.25;

        let from_opt = snapshot_nodes.iter().find(|n| {
            if let Ok(node) = n.try_lock() {
                node.name == *highest_name
            } else {
                false
            }
        });

        let to_opt = snapshot_nodes.iter().find(|n| {
            if let Ok(node) = n.try_lock() {
                node.name == *lowest_name
            } else {
                false
            }
        });

        if let (Some(from), Some(to)) = (from_opt, to_opt) {
            let mut from_node = from.lock().await;
            let mut to_node = to.lock().await;

            let mut from_energy = from_node.energy.lock().await;
            let mut to_energy = to_node.energy.lock().await;

            if from_energy.level >= delta {
                from_energy.level -= delta;
                to_energy.level += delta;

                println!(
                    "ü§ù Brain: –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª {:.2} —ç–Ω–µ—Ä–≥–∏–∏ {} ‚Üí {}",
                    delta, from_node.name, to_node.name
                );

                self.memory
                    .add_event(BrainEvent::new(
                        "redistribution",
                        &format!("{} ‚Üí {} (Œî={:.2})", from_node.name, to_node.name, delta),
                        delta,
                    ))
                    .await;
            }
        }
    }

    /// üß¨ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ (evolve mode)
    pub async fn evolve_network(&mut self, snapshot_nodes: &Vec<Arc<Mutex<Node>>>) {
        
        let mut rng = StdRng::from_entropy();

        for n in snapshot_nodes.iter() {
            if let Ok(node) = n.try_lock() {
                let mut energy_guard = node.energy.lock().await;

                // –°–ª—É—á–∞–π–Ω–∞—è "–º—É—Ç–∞—Ü–∏—è" ‚Äî –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
                let delta: f64 = rng.gen_range(-1.0..1.0);
                energy_guard.level = (energy_guard.level + delta).max(0.0);

                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–ø—ã—Ç —É–∑–ª–∞
                drop(energy_guard);
                let mut nd = node.clone();
                nd.experience += rng.gen_range(0.0..0.2);

                self.memory
                    .add_event(BrainEvent::new(
                        "evolve_step",
                        &format!("{} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {:.2}", node.name, delta),
                        delta,
                    ))
                    .await;
            }
        }

        println!("üß¨ Brain –ø—Ä–æ–≤—ë–ª —ç–≤–æ–ª—é—Ü–∏—é —É–∑–ª–æ–≤ ({} –Ω–æ–¥)", snapshot_nodes.len());
    }


    /// –ü—Ä–æ—Å—Ç–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è: —Å–∫–æ–ª—å–∑—è—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ aggressiveness –Ω–∞ –æ—Å–Ω–æ–≤–µ reward
    pub async fn learn_from_feedback(&mut self, reward: f64) {
        // –ó–∞–ø–æ–º–Ω–∏–º
        self.reward_history.push(reward);
        if self.reward_history.len() > 200 {
            self.reward_history.remove(0);
        }
        // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–µ–¥–Ω–∏–π reward -> –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç aggressiveness
        let avg: f64 = if !self.reward_history.is_empty() {
            let sum: f64 = self.reward_history.iter().sum();
            sum / (self.reward_history.len() as f64)
        } else { reward };

        // –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π reward > 0.7 ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—à–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–Ω–∏–∂–∞–µ–º
        if avg > 0.7 {
            self.aggressiveness *= 1.02;
        } else {
            self.aggressiveness *= 0.98;
        }
        // clamp
        if self.aggressiveness < 0.2 { self.aggressiveness = 0.2; }
        if self.aggressiveness > 3.0 { self.aggressiveness = 3.0; }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∑–≥–∞ –¥–ª—è API (snapshot).
    pub async fn snapshot(nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>) -> BrainState {
        let snapshot_nodes = {
            let guard = nodes.lock().await;
            guard.clone()
        };
 

        let mut infos = Vec::with_capacity(snapshot_nodes.len());
        let mut sum = 0.0;
        for n in snapshot_nodes.iter() {
            let node = n.lock().await;
            let energy_guard = node.energy.lock().await;
            let energy = energy_guard.level;
            let exp = node.experience;
            infos.push(NodeEnergyInfo {
                name: node.name.clone(),
                energy,
                experience: exp,
            });
            sum += energy; 
        }
        let avg = if infos.is_empty() { 0.0 } else { sum / (infos.len() as f64) };
        BrainState { nodes: infos, summary_avg_energy: avg }
    }
}
