use std::sync::Arc;
use serde::{Serialize}; 
use tokio::time::{timeout, interval, Duration}; 
use crate::memory::{Memory, BrainEvent}; 
use chrono::Utc; 
use rand::{Rng, SeedableRng};
use rand::rngs::StdRng;

use crate::interaction::NetworkBus;
use crate::economy::NetworkFund; 
use tokio::sync::Mutex; 

use crate::node::Node; 
use tokio::sync::RwLock;  
use tokio::sync::{Semaphore};
use futures::future::join_all;
use rand::thread_rng;

 

/// üß† –ú–æ–¥—É–ª—å —Å–æ–∑–Ω–∞–Ω–∏—è ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏. 

#[derive(Serialize, Clone)]
pub struct NodeEnergyInfo {
    pub name: String,
    pub energy: f64,
    pub experience: f64,
}

#[derive(Serialize, Clone)]
pub struct BrainState {
    pub nodes: Vec<NodeEnergyInfo>,
    pub summary_avg_energy: f64,
}
#[derive(Clone)]
pub struct Brain {
    pub memory: Arc<Mutex<Memory>>,
    pub aggressiveness: f64,
    pub reward_history: Vec<f64>,
    pub tick_counter: u64, 
} 
 

#[derive(Clone, Debug, serde::Serialize)]
pub struct BrainSnapshot {
    pub aggressiveness: f64,
    pub avg_recent_result: f64,
    pub recent_memory: Vec<BrainEvent>, 
    pub last_update: i64,
}

impl BrainSnapshot { 
    pub async fn from_brain_lock(brain: &Arc<RwLock<Brain>>) -> Self {
        let brain_guard = brain.read().await;
        let memory_guard = brain_guard.memory.lock().await;
        let recent_memory = memory_guard.get_recent(10).await;
        let avg_result = memory_guard.average_result(10).await;

        println!(
            "üìä [DEBUG] Snapshot: recent_memory.len = {}, avg_result = {:.2}",
            recent_memory.len(),
            avg_result
        );

        Self {
            aggressiveness: brain_guard.aggressiveness,
            avg_recent_result: avg_result,
            recent_memory,
            last_update: chrono::Utc::now().timestamp(),
        }
    }
}



impl Brain {
    pub fn new() -> Self {
        Self {
            memory: Arc::new(Mutex::new(Memory::new(100, 10000, 604800))), // short=100, long=10000
            aggressiveness: 1.0,
            reward_history: Vec::new(),
            tick_counter: 0, 
        }
    }
    /// –û—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è.
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞—Å–∫–∞: Brain::run(...).await
    pub async fn run(
        &mut self,
        nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>,
        fund: Arc<Mutex<NetworkFund>>,
        net: Arc<NetworkBus>,
    ) {
        

        println!("üß† [Brain::run] –¶–∏–∫–ª –º–æ–∑–≥–∞ –∑–∞–ø—É—â–µ–Ω!");

        let mut ticker = interval(Duration::from_secs(5)); 
        loop {
            ticker.tick().await;
  
            // === 1Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–æ–≤ ===
            let snapshot_nodes = {
                let guard = nodes.lock().await;
                guard.clone()
            };

            let mut energy_data = Vec::new();
            for n in snapshot_nodes.iter() {
                if let Ok(node) = n.try_lock() {
                    let e = node.energy.lock().await;
                    energy_data.push((node.name.clone(), e.level, node.experience));
                }
            }

            if energy_data.is_empty() {
                println!("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
                continue;
            }

             
            // === 2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏ ===
            let avg_energy = energy_data.iter().map(|(_, e, _)| *e).sum::<f64>() / energy_data.len() as f64;
            self.memory.lock().await.add_event(
                BrainEvent::new("analyze", "–°—Ä–µ–¥–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è —Å–µ—Ç–∏", avg_energy)
            ).await;
            println!("‚úÖ [DEBUG] –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å!");

             
            // === 3Ô∏è‚É£ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è ===
            let evolve_chance = (avg_energy / 100.0).clamp(0.1, 0.9);
            let action = if rand::random::<f64>() < evolve_chance {
                "evolve"
            } else if avg_energy > 40.0 {
                "help"
            } else {
                "rest"
            };
            println!("üß© –†–µ—à–µ–Ω–∏–µ: {}", action);

            let mut rng = StdRng::from_entropy();
            // === 4Ô∏è‚É£ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ===
            let result_metric = match action {
                "help" => {
                    self.redistribute_energy(&snapshot_nodes, &fund, avg_energy).await;
                    rng.gen_range(0.7..1.0)
                }
                "evolve" => { 
                    println!("üß©üß† [Brain::run::spawn] evolve start");
                    let nodes_clone = nodes.clone();
                    let fund_clone = fund.clone();
                    let net_clone = net.clone();
                    let mut brain_clone = self.clone();

                    tokio::spawn(async move {
                        brain_clone.evolve_network(nodes_clone, fund_clone, net_clone).await;
                        println!("üß† [Brain::run::spawn] evolve_network –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                    });

                    for n in snapshot_nodes.iter() {
                        if let Ok(node) = n.try_lock() {
                            let mut e = node.energy.lock().await;
                            e.level += rng.gen_range(0.5..2.0);
                        }
                    }

                    rng.gen_range(0.7..1.0)
                }
                "rest" => { 
                    println!("üò¥ Brain: —Å–µ—Ç—å –æ—Ç–¥—ã—Ö–∞–µ—Ç...");
                    for n in snapshot_nodes.iter() {
                        if let Ok(node) = n.try_lock() {
                            let mut e = node.energy.lock().await;
                            e.level += rng.gen_range(0.5..2.0);
                        }
                    }
                    rng.gen_range(0.5..0.8)
                }
                _ => 0.5,
            };
 
             
            self.memory.lock().await.add_event(BrainEvent::new(
                "feedback",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è",
                result_metric,
            )).await;
            println!("‚úÖ [DEBUG] –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å!");

            // === 6Ô∏è‚É£ –ê–¥–∞–ø—Ç–∞—Ü–∏—è (–æ–±—É—á–µ–Ω–∏–µ) ===
            self.learn_from_feedback(result_metric).await;

            // === 7Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===
            let recent_avg = self.memory.lock().await.average_result(10).await;
            println!(
                "üß† Brain: avg_energy = {:.2}, result = {:.2}, aggr = {:.2}, recent_avg = {:.2}",
                avg_energy, result_metric, self.aggressiveness, recent_avg
            );

            // === 8Ô∏è‚É£ –°–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏—è ===
            if recent_avg < 0.4 {
                self.aggressiveness *= 1.15;
                self.memory.lock().await.add_event(
                    BrainEvent::new("feedback", "–†–æ—Å—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.aggressiveness)
                ).await; 
                println!("‚ö° –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ ‚Üí {:.2}", self.aggressiveness);
            } else if recent_avg > 0.8 {
                self.aggressiveness *= 0.9;
                self.memory.lock().await.add_event(
                    BrainEvent::new("feedback", "–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.aggressiveness)
                ).await;  
                println!("üåø –°–Ω–∏–∂–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ ‚Üí {:.2}", self.aggressiveness);
            }else { 
                self.aggressiveness *= 1.02;
                self.memory.lock().await.add_event(
                    BrainEvent::new("feedback", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É", self.aggressiveness)
                ).await; 
            }
            
            if rand::random::<f64>() < 0.2 {
                let mut aggr = self.aggressiveness;
                aggr += (rand::random::<f64>() - 0.5) * 0.1;
                self.aggressiveness = aggr.clamp(0.1, 2.0);
                println!("üî• [Mutation] –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Üí {:.2}", self.aggressiveness);
            }

            // üß© –ö–∞–∂–¥—ã–µ 10 —Ç–∏–∫–æ–≤ ‚Äî —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑ –º–æ–∑–≥–∞
            if self.tick_counter % 10 == 0 {
                let event = BrainEvent::new("reflect", "–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–∞", self.aggressiveness);
                self.memory.lock().await.add_event(event).await;
                println!("üí≠ [Brain::reflect] –°–∞–º–æ–∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å {:.2})", self.aggressiveness);
            }

            // üåÄ –°–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞ 
            if self.tick_counter % 5 == 0 {
                // –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ —Å–ª–µ–≥–∫–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
                self.aggressiveness += 0.1 * (1.0 - self.aggressiveness);
                self.aggressiveness = self.aggressiveness.clamp(0.2, 2.0);
                println!("üí• [Impulse] –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∞: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å {:.2}", self.aggressiveness);
            }


            // –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ü–∏–∫–ª
            tokio::time::sleep(Duration::from_secs(1)).await;
        }
    }

    /// üîÑ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ (help mode)
    pub async fn redistribute_energy(
        &mut self,
        snapshot_nodes: &Vec<Arc<Mutex<Node>>>,
        fund: &Arc<Mutex<NetworkFund>>,
        avg_energy: f64,
    ) {
        if snapshot_nodes.is_empty() {
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —ç–Ω–µ—Ä–≥–∏–∏
        let mut energy_list: Vec<(String, f64)> = Vec::new();
        for n in snapshot_nodes.iter() {
            if let Ok(node) = n.try_lock() {
                let e = node.energy.lock().await;
                energy_list.push((node.name.clone(), e.level));
            }
        }

        if energy_list.len() < 2 {
            return;
        }

        energy_list.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or(std::cmp::Ordering::Equal));

        let (lowest_name, lowest_energy) = energy_list.first().unwrap();
        let (highest_name, highest_energy) = energy_list.last().unwrap();

        if highest_energy - lowest_energy < 5.0 {
            // –†–∞–∑–±—Ä–æ—Å –º–∞–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return;
        }

        let delta = (highest_energy - lowest_energy) * 0.25;

        let from_opt = snapshot_nodes.iter().find(|n| {
            if let Ok(node) = n.try_lock() {
                node.name == *highest_name
            } else {
                false
            }
        });

        let to_opt = snapshot_nodes.iter().find(|n| {
            if let Ok(node) = n.try_lock() {
                node.name == *lowest_name
            } else {
                false
            }
        });

        if let (Some(from), Some(to)) = (from_opt, to_opt) {
            let mut from_node = from.lock().await;
            let mut to_node = to.lock().await;

            let mut from_energy = from_node.energy.lock().await;
            let mut to_energy = to_node.energy.lock().await; 

            if from_energy.level >= delta {
                from_energy.level -= delta;
                to_energy.level += delta;

                let mut delta = (from_energy.level - to_energy.level) * 0.2;

                // üíñ –µ—Å–ª–∏ —Ü–µ–ª—å ‚Äî –ø–æ—Ç–æ–º–æ–∫, —É—Å–∏–ª–∏–≤–∞–µ–º –ø–æ–º–æ—â—å
                if to_node.name.contains("_child_") {
                    delta *= 1.5; // –ø–æ–º–æ–≥–∞—Ç—å –ø–æ—Ç–æ–º–∫–∞–º —á—É—Ç—å –±–æ–ª—å—à–µ
                }

                if delta > 1.0 {
                    from_energy.consume(delta);
                    to_energy.restore(delta); 
                }
                println!(
                    "ü§ù Brain: –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª {:.2} —ç–Ω–µ—Ä–≥–∏–∏ {} ‚Üí {}",
                    delta, from_node.name, to_node.name
                );

                self.memory.lock().await.add_event(
                    BrainEvent::new(
                        "redistribution",
                        &format!("{} ‚Üí {} (Œî={:.2})", from_node.name, to_node.name, delta),
                        delta,
                    )
                ).await;
 
            }
        }
    }

    /// üß¨ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ (evolve mode)
    pub async fn evolve_network(
        &mut self,
        nodes_ref: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>,
        _fund: Arc<Mutex<NetworkFund>>,
        net: Arc<NetworkBus>,
    ) {
        println!("üß† [DEBUG] evolve_network START tick={}", self.tick_counter);

        // --- 1Ô∏è‚É£ –°–Ω–∏–º–æ–∫ —Ç–µ–∫—É—â–∏—Ö –Ω–æ–¥ ---
        let snapshot_nodes = {
            let nodes = nodes_ref.lock().await;
            nodes.clone()
        };
        let total_before = snapshot_nodes.len();
        if total_before == 0 {
            println!("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏");
            return;
        }

        // --- 2Ô∏è‚É£ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–µ—Ä–µ–Ω–∞—Å–µ–ª–µ–Ω–∏—è ---
        {
            let total_now = nodes_ref.lock().await.len();
            if total_now > 400 {
                println!("‚ö†Ô∏è [EVOLUTION] –ü–µ—Ä–µ–Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {} –Ω–æ–¥ ‚Äî —ç–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞", total_now);
                return;
            }
        }

        println!("üß† –≠–≤–æ–ª—é—Ü–∏—è —É–∑–ª–æ–≤ ({} –Ω–æ–¥)", total_before);

        // --- 3Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ tick-–∏ ---
        use tokio::sync::Semaphore;
        let semaphore = Arc::new(Semaphore::new(12)); // –º–∞–∫—Å–∏–º—É–º 12 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        let mut handles = Vec::new();

        // --- 4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ tick –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã ---
        for n_arc in snapshot_nodes.into_iter() {
            let sem = semaphore.clone();
            let net = net.clone();
            let nodes_ref_clone = nodes_ref.clone();

            let handle = tokio::spawn(async move {
                let _permit = sem.acquire_owned().await.unwrap();
                // —Ç–∞–π–º–∞—É—Ç ‚Äî –µ—Å–ª–∏ —Ç–∏–∫ –∑–∞–≤–∏—Å–Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                match tokio::time::timeout(Duration::from_secs(6),
                    Node::tick(n_arc.clone(), net.clone(), nodes_ref_clone.clone(), 0)
                ).await {
                    Ok(res) => res,       // Option<Arc<Mutex<Node>>>
                    Err(_) => {
                        println!("‚ö†Ô∏è [Tick Timeout] Node tick took too long, skipped");
                        None
                    }
                }
            });
            handles.push(handle);
        }

        // --- 5Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã—Ö –¥–µ—Ç–µ–π ---
        let mut new_children: Vec<Arc<Mutex<Node>>> = Vec::new();
        for h in handles {
            if let Ok(Some(child)) = h.await {
                new_children.push(child);
            }
        }

        // --- 6Ô∏è‚É£ –£–¥–∞–ª—è–µ–º "–º—ë—Ä—Ç–≤—ã–µ" –Ω–æ–¥—ã ---
        {
            let mut nodes_locked = nodes_ref.lock().await;
            let mut survivors: Vec<Arc<Mutex<Node>>> = Vec::new();

            for n in nodes_locked.iter() {
                let node = n.lock().await;
                let e = node.energy.lock().await;
                if e.level > 5.0 {
                    survivors.push(n.clone());
                }
            }

            let removed = nodes_locked.len().saturating_sub(survivors.len());
            *nodes_locked = survivors;

            if removed > 0 {
                println!("üßπ –£–¥–∞–ª–µ–Ω–æ {} –º—ë—Ä—Ç–≤—ã—Ö –Ω–æ–¥", removed);
            }
        }

        // --- 7Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤ ---
        if !new_children.is_empty() {
            let added = new_children.len();
            let mut nodes_locked = nodes_ref.lock().await;
            nodes_locked.extend(new_children);
            println!("üß¨ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Ç–æ–º–∫–æ–≤: {}, —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–æ {}", added, nodes_locked.len());
        } else {
            println!("üß¨ –≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑ –Ω–æ–≤—ã—Ö –Ω–æ–¥");
        }

        // --- 8Ô∏è‚É£ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–µ—Ä–µ–Ω–∞—Å–µ–ª–µ–Ω–∏—è + —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö ---
        {
            let mut nodes = nodes_ref.lock().await;
            if nodes.len() > 120 {
                println!("‚ö†Ô∏è –ü–µ—Ä–µ–Ω–∞—Å–µ–ª–µ–Ω–∏–µ ({} –Ω–æ–¥): —É–¥–∞–ª—è–µ–º —Å–ª–∞–±–µ–π—à–∏—Ö...", nodes.len());

                // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–Ω–∏–º–æ–∫ —ç–Ω–µ—Ä–≥–∏–π
                let mut energy_snapshot = vec![];
                for n in nodes.iter() {
                    let node = n.lock().await;
                    let e = node.energy.lock().await;
                    energy_snapshot.push((n.clone(), e.level));
                }

                // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç–Ω–µ—Ä–≥–∏–∏
                energy_snapshot.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or(std::cmp::Ordering::Equal));

                // –æ—Å—Ç–∞–≤–ª—è–µ–º 80 —Å–∞–º—ã—Ö —Å–∏–ª—å–Ω—ã—Ö
                let survivors: Vec<_> = energy_snapshot.into_iter().rev().take(80).map(|(n, _)| n).collect();
                let removed = nodes.len().saturating_sub(survivors.len());
                *nodes = survivors;

                println!("üßπ –£–¥–∞–ª–µ–Ω–æ {} —Å–ª–∞–±—ã—Ö –Ω–æ–¥ (truncate –¥–æ 80)", removed);
            }
        }

        // --- 9Ô∏è‚É£ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤—ã–∂–∏–≤—à–∏—Ö ---
        {
            let mut rng = StdRng::from_entropy();
            let mut nodes_locked = nodes_ref.lock().await;

            for n in nodes_locked.iter() {
                let mut node = n.lock().await;
                let mut e = node.energy.lock().await;
                e.level += 5.0 + rng.gen_range(0.0..10.0);
                if e.level > 120.0 {
                    e.level = 120.0;
                }
            }
        }

        println!("‚úÖ [DEBUG] evolve_network DONE");
    }




    /// –ü—Ä–æ—Å—Ç–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è: —Å–∫–æ–ª—å–∑—è—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ aggressiveness –Ω–∞ –æ—Å–Ω–æ–≤–µ reward
    pub async fn learn_from_feedback(&mut self, reward: f64) {
        // –ó–∞–ø–æ–º–Ω–∏–º
        self.reward_history.push(reward);
        if self.reward_history.len() > 200 {
            self.reward_history.remove(0);
        }
        // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–µ–¥–Ω–∏–π reward -> –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç aggressiveness
        let avg: f64 = if !self.reward_history.is_empty() {
            let sum: f64 = self.reward_history.iter().sum();
            sum / (self.reward_history.len() as f64)
        } else { reward };

        // –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π reward > 0.7 ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—ã—à–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–Ω–∏–∂–∞–µ–º
        if avg > 0.7 {
            self.aggressiveness *= 1.02;
        } else {
            self.aggressiveness *= 0.98;
        }
        // clamp
        if self.aggressiveness < 0.2 { self.aggressiveness = 0.2; }
        if self.aggressiveness > 3.0 { self.aggressiveness = 3.0; }
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∑–≥–∞ –¥–ª—è API (snapshot).
    pub async fn snapshot(nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>) -> BrainState {
        let snapshot_nodes = {
            let guard = nodes.lock().await;
            guard.clone()
        };
 

        let mut infos = Vec::with_capacity(snapshot_nodes.len());
        let mut sum = 0.0;
        for n in snapshot_nodes.iter() {
            let node = n.lock().await;
            let energy_guard = node.energy.lock().await;
            let energy = energy_guard.level;
            let exp = node.experience;
            infos.push(NodeEnergyInfo {
                name: node.name.clone(),
                energy,
                experience: exp,
            });
            sum += energy; 
        }
        let avg = if infos.is_empty() { 0.0 } else { sum / (infos.len() as f64) };
        BrainState { nodes: infos, summary_avg_energy: avg }
    }
}
