use std::sync::Arc;
use tokio::sync::Mutex;
use rand::{Rng, rngs::StdRng, SeedableRng};

use crate::node::Node;
use crate::economy::NetworkFund;

/// üß† –ú–æ–¥—É–ª—å —Å–æ–∑–Ω–∞–Ω–∏—è ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏.
/// –ù–æ–¥—ã "–æ—Å–æ–∑–Ω–∞—é—Ç" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
pub struct Brain;

impl Brain {
    /// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è (–∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ).
    pub async fn run(nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>, fund: Arc<Mutex<NetworkFund>>) {
        let nodes_guard = nodes.lock().await;
        let mut energy_list = Vec::new();

        // üß† –°–æ–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–Ω–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        for node in nodes_guard.iter() {
            let n = node.lock().await;
            let e = n.energy.lock().await;
            energy_list.push((n.name.clone(), e.level));
        }

        // üìä –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —ç–Ω–µ—Ä–≥–∏–∏
        energy_list.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or(std::cmp::Ordering::Equal));

        println!("üß† –°–æ–∑–Ω–∞–Ω–∏–µ —Å–µ—Ç–∏ ‚Äî —É—Ä–æ–≤–Ω–∏ —ç–Ω–µ—Ä–≥–∏–∏:");
        for (name, level) in &energy_list {
            println!("   ‚Ä¢ {} ‚Üí {:.2}", name, level);
        }

        // ü§ù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
        if let (Some((weak_name, weak_level)), Some((strong_name, strong_level))) =
            (energy_list.first(), energy_list.last())
        {
            if strong_level - weak_level > 10.0 {
                println!(
                    "‚ö° –°–æ–∑–Ω–∞–Ω–∏–µ —Ä–µ—à–∏–ª–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é: {} ‚Üí {} (—Ä–∞–∑–Ω–∏—Ü–∞ {:.2})",
                    strong_name, weak_name, strong_level - weak_level
                );

                // üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–¥
                let mut weak_node_opt = None;
                let mut strong_node_opt = None;

                for n in nodes_guard.iter() {
                    let node = n.lock().await;
                    if node.name == *weak_name {
                        weak_node_opt = Some(n.clone());
                    } else if node.name == *strong_name {
                        strong_node_opt = Some(n.clone());
                    }
                }

                if let (Some(weak_node), Some(strong_node)) = (weak_node_opt, strong_node_opt) {
                    let mut w_guard = weak_node.lock().await;
                    let mut s_guard = strong_node.lock().await;

                    let mut w_energy = w_guard.energy.lock().await;
                    let mut s_energy = s_guard.energy.lock().await;

                    let transfer = 5.0;
                    if s_energy.level > transfer {
                        s_energy.level -= transfer;
                        w_energy.level += transfer;

                        println!(
                            "üîã {} –ø–æ–ª—É—á–∏–ª +{transfer}, {} –æ—Ç–¥–∞–ª -{transfer}",
                            weak_name, strong_name
                        );
                    }
                }
            }
        }


        drop(nodes_guard);
        drop(fund);
    }

    /// üîÑ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ (–≤–∞—Ä–∏–∞–Ω—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ)
    pub async fn balance_energy(nodes: Arc<Mutex<Vec<Arc<Mutex<Node>>>>>) {
        let nodes_guard = nodes.lock().await;
        let mut energy_data = Vec::new();

        // –°–æ–±–∏—Ä–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        for n in nodes_guard.iter() {
            let node_guard = n.lock().await;
            let energy = node_guard.energy.lock().await;
            energy_data.push((node_guard.name.clone(), energy.level));
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º
        energy_data.sort_by(|a, b| a.1.partial_cmp(&b.1).unwrap_or(std::cmp::Ordering::Equal));

        if let (Some((weak_name, weak_level)), Some((strong_name, strong_level))) =
            (energy_data.first(), energy_data.last())
        {
            if strong_level - weak_level > 10.0 {
                println!(
                    "ü§ù –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏: {} ‚Üí {} (—Ä–∞–∑–Ω–∏—Ü–∞ {:.2})",
                    strong_name, weak_name, strong_level - weak_level
                );
            }
        }
    }
}
